name: C/C++ CI

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
  build-windows:
    name: build-windows-vs
    runs-on: windows-latest
    steps:
    - name: compile with VS 2022
      shell: cmd 
      run: ${{ '"C:\Program Files\Microsoft Visual Studio\2022\Enterprise\Common7\Tools\VsDevCmd.bat" && msbuild' }}
      working-directory: 'likespro.eth - UNIVERSAL'
    - name: run
      run: |
        'x64\Release\likespro.eth - UNIVERSAL.exe'
      shell: cmd
    - name: upload executable
      uses: actions/upload-artifact@v4
      with:
        name: windows
        path: |
          'x64\Release\likespro.eth - UNIVERSAL.exe'
  build-windows-mingw:
    name: build-windows-mingw
    runs-on: windows-latest
    steps:
      - uses: actions/checkout@v4
      - name: Set up MinGW
        uses: egor-tensin/setup-mingw@v2
      - name: compile with GCC
        run: |
          g++ -std=c++17 'likespro.eth - UNIVERSAL/likespro.eth - UNIVERSAL.cpp' -o 'likespro.eth - UNIVERSAL.exe'
      - name: run
        run: |
          './likespro.eth - UNIVERSAL.exe'
        shell: bash
      - name: upload executable
        uses: actions/upload-artifact@v4
        with:
          name: ${{matrix.os}}
          path: |
            'likespro.eth - UNIVERSAL.exe'
  build-mac-and-ubuntu:
    runs-on: ${{matrix.os}}
    strategy:
      matrix:
        os: [macos-latest, ubuntu-latest]
    name: 'build-${{matrix.os}}'
    steps:
      - uses: actions/checkout@v4
      - name: compile with GCC
        run: |
          g++ -std=c++17 'likespro.eth - UNIVERSAL/likespro.eth - UNIVERSAL.cpp' -o 'likespro.eth - UNIVERSAL.o'
      - name: run
        run: |
          './likespro.eth - UNIVERSAL.o'
        shell: bash
      - name: upload executable
        uses: actions/upload-artifact@v4
        with:
          name: ${{matrix.os}}
          path: |
            'likespro.eth - UNIVERSAL.o'
